#Read the data
1 + 1
#Read the data
1 == 1
#Read the data
T & F
#Read the data
log(30)
2 + 3 * 52
8 ^5
(2 ^ 3) ^5
1.4E-2
1.4E^-2
s_vector <- c(3,7,11,15)
print(s_vector)
c(3,7,11,15)
1:10
sample(1:99, 10)
sample(1:100, 10)
x <- c(1,2,3,4,5,6,7)
print(x[1:3])
print(order(x))
order(x)
# Print the indices
print(order_indices)
x <- c(5, 2, 8, 1, 7)
# Use the order() function
order_indices <- order(x)
# Print the indices
print(order(x))
# Print the sorted vector
print(sorted_x)
x <- c(5, 2, 8, 1, 7)
# Use the order() function to get indices
order_indices <- order(x)
print(order_indices)
# Use the order() function to get indices
order_indices <- order(x)
print(sorted_x)
print(sorted_x)
debugSource("~/Downloads/dummy.R")
print(sorted_x)
print(sorted_x)
print(sorted_x)
print(sorted_x)
print(sorted_x)
order_indices <- order(x)
print(sorted_x)
# Print the sorted vector
print(sorted_x)
debugSource("~/Downloads/dummy.R")
# Create a vector
x <- c(5, 2, 8, 1, 7)
debugSource("~/Downloads/dummy.R")
print(squared_nums)
debugSource("~/Downloads/dummy.R")
print(squared_nums)
print(y)
print(y)
debugSource("~/Downloads/dummy.R")
y <- x + 1
print(y)
debugSource("~/Downloads/dummy.R")
print(x+y)
print(x+y)
print(x/y)
debugSource("~/Downloads/dummy.R")
source("~/Downloads/dummy.R")
debugSource("~/Downloads/dummy.R")
# Perform element-wise addition
print(x + 0:1)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
debugSource("~/Downloads/dummy.R")
# Perform element-wise addition
y <- x + 0:2
debugSource("~/Downloads/dummy.R")
print(y)
# Perform element-wise addition
y <- x + 0:11
debugSource("~/Downloads/dummy.R")
n = 10
x1 = rnorm(n, mean = 4, sd = 2)
Interval_1 = c(mean(x1) - 2/sqrt(n), mean(x1) + 2/sqrt(n))
Interval_1 = c(mean(x1) - 2/sqrt(n), mean(x1) + 2/sqrt(n))
Interval_1 = c(mean(x1) - 2/sqrt(n), mean(x1) + 2/sqrt(n))
Interval_2 = c(mean(x1) - 2/sqrt(n), mean(x1) + 2/sqrt(n))
n = 10
x1 = rnorm(n, mean = 4, sd = 2)
Interval_1 = c(mean(x1) - 2/sqrt(n), mean(x1) + 2/sqrt(n))
data <- c(50, 45, 55, 54, 45, 54, 53, 40, 42, 24, 34, 44, 34, 56, 53, 66, 34, 34, 44,
44, 56, 56, 45, 54, 45, 66, 33, 54, 33, 27, 25, 39, 39, 41, 50, 45, 55, 54,
45, 54, 53, 40, 42, 24, 34,
44, 34, 56, 53, 33, 34, 34, 44, 44, 56, 56, 45, 54, 45, 66, 66, 54, 83, 27)
confidence_interval <- t.test(data)$conf.int
print(confidence_interval)
install.packages("MacTex")
setwd("/Users/pritommazumder/Downloads/Lecture Notes/ADAML-UniBam")
rm(list = ls())
data <- read.csv("Shower_data.csv")
data <- read.csv2("Shower_data.csv")
View(data)
View(data)
data$Energy <- data$Volume * ((data$Avgtemperature - 12) * 0.65) * (4.184/3600)
View(data)
# Calculation the Engergy per shower
data$AvgEnergyPerShower <- tapply(data$Energy, data$Hh_ID, function(x) sum(x) / length(x))
data <- data %>% group_by(Hh_ID) %>% mutate(AvgEnergyPerShower = sum(Energy) / n())
data <- data %>%
group_by(Hh_ID) %>%
mutate(AvgEnergyPerShower = sum(Energy) / n())
data <- group_by(data, Hh_ID) %>%
mutate(AvgEnergyPerShower = sum(Energy) / n())
avgEnergy <- group_by(data, Hh_ID) %>% mutate(AvgEnergyPerShower = sum(Energy) / n())
library(dplyr)
# Calculation the Engergy per shower
avgEnergy <- group_by(data, Hh_ID) %>% mutate(AvgEnergyPerShower = sum(Energy) / n())
View(avgEnergy)
data$AvgEnergyPerShower <- tapply(data$Energy, data$Household_ID, function(x) sum(x) / length(x))
data <- data %>%
group_by(Household_ID) %>%
mutate(AvgEnergyPerShower = sum(Energy) / n())
rm(list = ls())
data <- read.csv2("Shower_data.csv")
# Calculating the Energy Consumption per shower.
data$Energy <- data$Volume * ((data$Avgtemperature - 12) * 0.65) * (4.184/3600)
library(dplyr)
# Calculation the Engergy per shower
data <- data %>%
group_by(Hh_ID) %>%
mutate(AvgEnergyPerShower = sum(Energy) / n())
View(data)
survey <- read.csv2("Shower_survey_data.csv")
# Merge survey data with the original data using the common Hh_ID.
merged_data <- merge(data, survey, by = "Hh_ID", all.x = TRUE)
View(merged_data)
t_test_result <- t.test(merged_data$AvgEnergyWithFeedback, merged_data$AvgEnergyWithoutFeedback, paired = TRUE)
View(merged_data)
View(survey)
View(survey)
View(data)
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
View(data)
View(data)
filtered_data <- data %>%
filter(Shower > 10, !(group %in% c(1, 2)))
View(filtered_data)
filtered_data <- data %>%
filter(!(Group %in% c(1, 2)))
filtered_data <- data %>%
filter(!(group %in% c(1, 2)))
View(filtered_data)
filtered_data$Energy <- data$Volume * ((data$Avgtemperature - 12) * 0.65) * (4.184/3600)
filtered_data$Energy <- filtered_data$Volume * ((filtered_data$Avgtemperature - 12) * 0.65) * (4.184/3600)
View(filtered_data)
View(filtered_data)
average_energy_per_shower <- filtered_data %>%
group_by(Hh_ID) %>%
summarize(AvgEnergyPerShower = mean(Energy))
View(average_energy_per_shower)
View(filtered_data)
shower_1_to_10 <- filtered_data %>%
filter(shower >= 1 & shower <= 10)
View(filtered_data)
shower_1_to_10 <- filtered_data %>%
filter(Shower >= 1 & Shower <= 10)
shower_above_10 <- filtered_data %>%
filter(Shower > 10)
View(shower_1_to_10)
View(shower_above_10)
avg_energy_shower_1_to_10 <- shower_1_to_10 %>%
group_by(Household_ID) %>%
summarize(AvgEnergyPerShower_1_to_10 = mean(Energy))
avg_energy_shower_1_to_10 <- shower_1_to_10 %>%
group_by(Hh_ID) %>%
summarize(AvgEnergyPerShower_1_to_10 = mean(Energy))
avg_energy_shower_above_10 <- shower_above_10 %>%
group_by(Hh_ID) %>%
summarize(AvgEnergyPerShower_Above_10 = mean(Energy))
View(avg_energy_shower_1_to_10)
View(avg_energy_shower_above_10)
View(avg_energy_shower_1_to_10)
t_test_result <- t.test(
avg_energy_shower_1_to_10$AvgEnergyPerShower_1_to_10,
avg_energy_shower_above_10$AvgEnergyPerShower_Above_10
)
View(t_test_result)
View(t_test_result)
View(data)
combined_dataset <- dplyr::inner_join(data, survey)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
combined_dataset <- dplyr::inner_join(data, survey)
View(combined_dataset)
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
View(combined_dataset)
View(combined_dataset)
View(combined_dataset)
young_data <- combined_dataset[combined_dataset$alter == '20-29', 'Energy']
older_data <- combined_dataset[combined_dataset$alter != '20-29', 'Energy']
result <- t.test(young_data, older_data)
View(result)
View(combined_dataset)
View(survey)
View(combined_dataset)
combined_dataset <- combined_dataset %>% dplyr::mutate(isYoung = ifelse(alter %in% c("20-29"), TRUE, FALSE))
View(combined_dataset)
t.test(combined_dataset %>% dplyr::filter(isYoung) %>% dplyr::pull(Energy),
combined_dataset %>% dplyr::filter(!isYoung) %>% dplyr::pull(Energy))
result <- t.test(combined_dataset %>% dplyr::filter(isYoung) %>% dplyr::pull(Energy),
combined_dataset %>% dplyr::filter(!isYoung) %>% dplyr::pull(Energy))
View(result)
combined_dataset <- combined_dataset %>%
filter(Shower >= 1 & Shower <= 10)
View(combined_dataset)
combined_dataset <- combined_dataset %>%
filter(Shower >= 1 & Shower <= 10)
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
combined_dataset <- combined_dataset %>% dplyr::mutate(isYoung = ifelse(alter %in% c("20-29"), TRUE, FALSE))
result <- t.test(combined_dataset %>% dplyr::filter(isYoung) %>% dplyr::pull(Energy),
combined_dataset %>% dplyr::filter(!isYoung) %>% dplyr::pull(Energy))
View(result)
# 1. Combine the data set
combined_dataset <- dplyr::inner_join(data, survey)
# 2. Separate the baseline phase
combined_dataset <- combined_dataset %>%
filter(Shower >= 1 & Shower <= 10)
# 3. Calculate the energy consumption
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
# 4. Create a variable to distinguish between young and old people
combined_dataset <- combined_dataset %>% dplyr::mutate(isYoung = ifelse(alter %in% c("20-29"), TRUE, FALSE))
# 5. Apply the t-test
result <- t.test(combined_dataset %>% dplyr::filter(isYoung) %>% dplyr::pull(Energy),
combined_dataset %>% dplyr::filter(!isYoung) %>% dplyr::pull(Energy))
View(result)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
# 1. Combine the data set
combined_dataset <- dplyr::inner_join(data, survey)
# 2. Separate the baseline phase
baseline_phase <- baseline_phase %>%
filter(Shower >= 1 & Shower <= 10)
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
# 1. Combine the data set
combined_dataset <- dplyr::inner_join(data, survey)
# 2. Separate the baseline phase
baseline_phase <- combined_dataset %>%
filter(Shower >= 1 & Shower <= 10)
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
View(baseline_phase)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
# 1. Combine the data set
combined_dataset <- dplyr::inner_join(data, survey)
# 2. Separate the baseline phase
baseline_phase <- combined_dataset %>%
filter(Shower >= 1 & Shower <= 10)
# 1. Calculate the energy consumption
baseline_phase$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
combined_dataset <- dplyr::inner_join(data, survey)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
# 1. Combine the data set
combined_dataset <- dplyr::inner_join(data, survey)
baseline_phase <- combined_dataset %>%
filter(Shower >= 1 & Shower <= 10)
baseline_phase$Energy <- baseline_phase$Volume * ((baseline_phase$Avgtemperature - 12) * 0.65) * (4.184/3600)
View(baseline_phase)
male_data <- baseline_phase[baseline_phase$gesl == 'weiblich' & survey_data$baseline_phase, 'Volume']
male_data <- baseline_phase[baseline_phase$gesl == 'weiblich' & baseline_phase$baseline_phase, 'Volume']
female_data <- baseline_phase[baseline_phase$gesl == 'männlich' & baseline_phase$baseline_phase, 'Volume']
male_data <- baseline_phase[baseline_phase$gesl == 'männlich' & baseline_phase$baseline_phase, 'Volume']
female_data <- baseline_phase[baseline_phase$gesl == 'weiblich' & baseline_phase$baseline_phase, 'Volume']
avg_shower_per_household <- aggregate(Volume ~ Hh_id + gesl, data = baseline_phase, FUN = mean)
avg_shower_per_household <- aggregate(Volume ~ Hh_ID + gesl, data = baseline_phase, FUN = mean)
View(avg_shower_per_household)
male_data <- avg_shower_per_household[avg_shower_per_household$gesl == 'männlich', 'Volume']
female_data <- avg_shower_per_household[avg_shower_per_household$gesl == 'weiblich', 'Volume']
# Perform a two-sample t-test
result <- t.test(male_data, female_data)
View(result)
View(combined_dataset)
View(combined_dataset)
View(combined_dataset)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
combined_dataset <- dplyr::inner_join(data, survey)
combined_dataset <- combined_dataset[combined_dataset$einkommen != 'Keine Angabe', ]
View(combined_dataset)
View(survey)
filtered_data <- combined_dataset[combined_dataset$group %in% c(3, 4, 5, 6) & combined_dataset$Shower >= 10, ]
View(filtered_data)
lower_income_categories <- c('< 3000 Fr.', '3000 - 3999 Fr.', '4000 - 4999 Fr.',
'5000 - 5999 Fr.', '6000 - 6999 Fr.', '7000 - 7999 Fr.',
'8000 - 8999 Fr.')
lower_income_data <- filtered_data[filtered_data$einkommen %in% lower_income_categories, 'Volume']
higher_income_data <- filtered_data[!(filtered_data$einkommen %in% lower_income_categories), 'Volume']
result_d <- t.test(high_income_data, low_income_data)
result_d <- t.test(higher_income_data, lower_income_data)
View(result_d)
result_d <- t.test(lower_income_data, higher_income_data)
View(result_d)
View(combined_dataset)
View(data)
View(combined_dataset)
# 1. Add the Energy cosumed for every shower.
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
combined_dataset <- dplyr::inner_join(data, survey)
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
cor_matrix <- cor(combined_dataset[c("EnergyConsumption", "Showertime", "Flowrate", "Avgtemperature", "Breaktime")])
View(combined_dataset)
cor_matrix <- cor(combined_dataset[c("Energy", "Showertime", "Flowrate", "Avgtemperature", "Breaktime")])
cor_energy <- cor_matrix["Energy", c("Showertime", "Flowrate", "Avgtemperature", "Breaktime")]
alpha_level <- 0.05
# Function to check if p-value is less than alpha
check_significance <- function(p_value) {
if (p_value < alpha_level) {
cat("Reject the null hypothesis; there is a significant correlation.\n")
} else {
cat("Fail to reject the null hypothesis; there is no significant correlation.\n")
}
}
# Test for correlation with 'Showertime'
test_result_showertime <- cor.test(filtered_data$EnergyConsumption, filtered_data$Showertime)
alpha_level <- 0.05
# Function to check if p-value is less than alpha
check_significance <- function(p_value) {
if (p_value < alpha_level) {
cat("Reject the null hypothesis; there is a significant correlation.\n")
} else {
cat("Fail to reject the null hypothesis; there is no significant correlation.\n")
}
}
# Test for correlation with 'Showertime'
test_result_showertime <- cor.test(combined_dataset$Energy, combined_dataset$Showertime)
cat("Correlation with Showertime:\n")
cat("Correlation coefficient:", cor_energy["Showertime"], "\n")
cat("p-value:", test_result_showertime$p.value, "\n")
check_significance(test_result_showertime$p.value)
# Test for correlation with 'Flowrate'
test_result_flowrate <- cor.test(combined_dataset$Energy, combined_dataset$Showertime)
cat("\nCorrelation with Flowrate:\n")
cat("Correlation coefficient:", cor_energy["Flowrate"], "\n")
cat("p-value:", test_result_flowrate$p.value, "\n")
check_significance(test_result_flowrate$p.value)
# Test for correlation with 'Avgtemperature'
test_result_avgtemperature <- cor.test(combined_dataset$Energy, combined_dataset$Showertime)
cat("\nCorrelation with Avgtemperature:\n")
cat("Correlation coefficient:", cor_energy["Avgtemperature"], "\n")
cat("p-value:", test_result_avgtemperature$p.value, "\n")
check_significance(test_result_avgtemperature$p.value)
# Test for correlation with 'Breaktime'
test_result_breaktime <- cor.test(combined_dataset$Energy, combined_dataset$Showertime)
cat("\nCorrelation with Breaktime:\n")
cat("Correlation coefficient:", cor_energy["Breaktime"], "\n")
cat("p-value:", test_result_breaktime$p.value, "\n")
check_significance(test_result_breaktime$p.value)
rm(list = ls())
library(dplyr)
# Read the CSV file
data <- read.csv2("Shower_data.csv")
#load and prepare survey dataset
survey <- read.csv2("Shower_survey_data.csv")
combined_dataset <- dplyr::inner_join(data, survey)
# 1. Add the Energy cosumed for every shower.
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
View(combined_dataset)
View(combined_dataset)
# Display the correlation coefficients
cat("Correlation with EnergyConsumption:\n")
cat("Showertime:", cor_energy["Showertime"], "\n")
# 1. Add the Energy consumed for every shower.
combined_dataset$Energy <- combined_dataset$Volume * ((combined_dataset$Avgtemperature - 12) * 0.65) * (4.184/3600)
# Calculate the correlation matrix
cor_matrix <- cor(combined_dataset[c("Energy", "Showertime", "Flowrate", "Avgtemperature", "Breaktime")])
# Extract the correlation coefficients
cor_energy <- cor_matrix["Energy", c("Showertime", "Flowrate", "Avgtemperature", "Breaktime")]
# Display the correlation coefficients
cat("Correlation with EnergyConsumption:\n")
cat("Showertime:", cor_energy["Showertime"], "\n")
cat("Flowrate:", cor_energy["Flowrate"], "\n")
cat("Avgtemperature:", cor_energy["Avgtemperature"], "\n")
cat("Breaktime:", cor_energy["Breaktime"], "\n")
View(combined_dataset)
ggplot(cor_data, aes(x = Factors, y = Correlation)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(title = "Correlation with Energy Consumption",
x = "Factors",
y = "Correlation Coefficient") +
theme_minimal()
library(ggplot)
library(ggplot2)
ggplot(cor_data, aes(x = Factors, y = Correlation)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(title = "Correlation with Energy Consumption",
x = "Factors",
y = "Correlation Coefficient") +
theme_minimal()
# Create a data frame for plotting
cor_data <- data.frame(Factors = names(cor_energy), Correlation = cor_energy)
# Display the correlation coefficients
# Plot the correlation coefficients
ggplot(cor_data, aes(x = Factors, y = Correlation)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(title = "Correlation with Energy Consumption",
x = "Factors",
y = "Correlation Coefficient") +
theme_minimal()
