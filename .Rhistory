#Read the data
1 + 1
#Read the data
1 == 1
#Read the data
T & F
#Read the data
log(30)
2 + 3 * 52
8 ^5
(2 ^ 3) ^5
1.4E-2
1.4E^-2
s_vector <- c(3,7,11,15)
print(s_vector)
c(3,7,11,15)
1:10
sample(1:99, 10)
sample(1:100, 10)
x <- c(1,2,3,4,5,6,7)
print(x[1:3])
print(order(x))
order(x)
# Print the indices
print(order_indices)
x <- c(5, 2, 8, 1, 7)
# Use the order() function
order_indices <- order(x)
# Print the indices
print(order(x))
# Print the sorted vector
print(sorted_x)
x <- c(5, 2, 8, 1, 7)
# Use the order() function to get indices
order_indices <- order(x)
print(order_indices)
# Use the order() function to get indices
order_indices <- order(x)
print(sorted_x)
print(sorted_x)
debugSource("~/Downloads/dummy.R")
print(sorted_x)
print(sorted_x)
print(sorted_x)
print(sorted_x)
print(sorted_x)
order_indices <- order(x)
print(sorted_x)
# Print the sorted vector
print(sorted_x)
debugSource("~/Downloads/dummy.R")
# Create a vector
x <- c(5, 2, 8, 1, 7)
debugSource("~/Downloads/dummy.R")
print(squared_nums)
debugSource("~/Downloads/dummy.R")
print(squared_nums)
print(y)
print(y)
debugSource("~/Downloads/dummy.R")
y <- x + 1
print(y)
debugSource("~/Downloads/dummy.R")
print(x+y)
print(x+y)
print(x/y)
debugSource("~/Downloads/dummy.R")
source("~/Downloads/dummy.R")
debugSource("~/Downloads/dummy.R")
# Perform element-wise addition
print(x + 0:1)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
debugSource("~/Downloads/dummy.R")
# Perform element-wise addition
y <- x + 0:2
debugSource("~/Downloads/dummy.R")
print(y)
# Perform element-wise addition
y <- x + 0:11
debugSource("~/Downloads/dummy.R")
shower_data <- read.csv("Shower_data.csv", header = TRUE, sep = ";")
setwd("/Users/pritommazumder/Downloads/Lecture Notes/ADAML-UniBam")
setwd("/Users/pritommazumder/Downloads/Lecture Notes/ADAML-UniBam")
shower_data <- read.csv("Shower_data.csv", header = TRUE, sep = ";")
shower_survey <- read.csv("Shower_survey_data.csv", header = TRUE, sep = ";")
average_showertime <- mean(shower_data$Showertime)
variance_showertime <- var(shower_data$Showertime)
median_showertime <- median(data$Showertime)
median_showertime <- median(shower_data$Showertime)
cat("Average Showertime:", average_showertime, "\n")
cat("Median Showertime:", median_showertime, "\n")
quantile_data <- quantile(data$Showertime)
quantile_data <- quantile(shower_data$Showertime)
# In order to access the first quantile we need to use this
# Accessing the first element.
cat(quantile_data[1])
range <- function(vector){
return (max(vector) - min(vector))
}
range(shower_data$Volume)
a <- filter(shower_data, Hh_ID == 6395)
library(dplyr)
library(weathermetrics)
a <- filter(shower_data, Hh_ID == 6395)
View(a)
b <- arrange(a, Volume)
View(b)
d <- summarise(shower_data, minShowerDuration = min(Showertime),
maxShowerDuration = max(Showertime))
View(d)
shower_data$Avgtemperature <- as.numeric(shower_data$Avgtemperature)
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
View(e)
View(e)
grouped_showers <- group_by(shower_data, Hh_ID)
measures <- summarise(grouped_showers, meanDuration = mean(Showertime),
meanTemperature = mean(Avgtemperature),
meanVolume = mean(Volume))
View(measures)
measures <- shower_data %>% group_by(Hh_ID) %>%
summarise(meanDuration = mean(Showertime),
meanTemperature = mean(Avgtemperature),
meanVolume = mean(Volume))
moreThan50 <- shower_data %>% group_by(Hh_ID) %>%
summarise(n = n()) %>% filter(n > 50)
View(moreThan50)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %>%
summarise(n = dplyr::n()) %>%
group_by(group) %>%
summarise(grpmean = mean(n))
View(avgNumberOfShowers)
View(shower_data)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %>%
group_by(group)
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %>% group_by(group)
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID) %>%
summarise(n = dplyr::n())
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %>%
summarise(n = dplyr::n())
group_by(group) %>%
summarise(grpmean = mean(n))
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %>%
summarise(n = dplyr::n())
group_by(group) %>%
summarise(grpmean = mean(n))
# Load and inspect the data
data <- read.csv2("Shower_data.csv")
# The group has numeric values which is not meaningful
# We have to convert it to factor.
data$group <- as.factor(data$group)
levels(data$group) <- c("First group", "Second group",
"Third group", "Fourth group", "Fifth group", "Sixth group")
rm(list = ls())
# First step is to import the library.
library(dplyr)
# Load and inspect the data
data <- read.csv2("Shower_data.csv")
# The group has numeric values which is not meaningful
# We have to convert it to factor.
data$group <- as.factor(data$group)
levels(data$group) <- c("First group", "Second group",
"Third group", "Fourth group", "Fifth group", "Sixth group")
survey <- read.csv2("Shower_survey_data.csv")
combined_dataset <- dplyr::inner_join(data, survey)
View(combined_dataset)
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, volume)
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group)
View(result)
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group)
%>% dplyr::summarise(avgVolume = mean(Volume), avgDuration = mean(Showertime))
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group)
%>% dplyr::summarise(avgVolume = mean(Volume),
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group) %>%
dplyr::summarise(avgVolume = mean(Volume),
avgDuration = mean(Showertime))
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group) %>%
dplyr::summarise(avgVolume = mean(Volume),
avgDuration = mean(Showertime))
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group)
%>% dplyr::summarise(avgVolume = mean(Volume),
result <- combined_dataset %>% dplyr::group_by(X03d_longhair, group) %>%
dplyr::summarise(avgVolume = mean(Volume),
avgDuration = mean(Showertime))
library(ggplot2)
g <- ggplot(data, aes(x=Avgtemperature, y=Volume))
View(g)
g <- g + geom_point()
g
g <- g + ggtitle("Distribution of average temparature and volume")
g <- g + xlab("Temperature")
g <- g + ylab("Volume in liters")
<- g + geom_hline(yintercept = mean(data$Volume), color = "red")
g <- g + ggtitle("Distribution of average temparature and volume")
g <- g + xlab("Temperature")
g <- g + ylab("Volume in liters")
g <- g + geom_hline(yintercept = mean(data$Volume), color = "red")
g
g <- ggplot(data, aes(x=Avgtemperature, y=Volume, color=factor(group)))
g <- g + geom_point()
g
g <- ggplot(data, aes(x=Avgtemperature, y=Volume))
g <- g + geom_point()
g <- g + facet_wrap(~group, nrow = 1)
g
View(data)
g <- ggplot(data, aes(x=Showertime, y=Volume))
g <- g + geom_point()
g
g2 <- ggplot(data, aes(x=log(Showertime), y=log(Volume)))
g2 <- g2 + geom_point()
g2
g3 <- ggplot(data, aes(x="", y=Showertime))
g3 <g3 + geom_boxplot()
g3 <- ggplot(data, aes(x="", y=Showertime))
g3 <- g3 + geom_boxplot()
g3
g4 <- ggplot(survey, aes(x=as.factor(einkommen)))
g4 <- g4 + geom_bar()
g4
View(survey)
g5 <- ggplot(data, aes(x=Volume))
g5 <- g5 + geom_density()
g5
g5 <- ggplot(data, aes(x=Volume))
g5 <- g5 + geom_density()
g5 <- g5 + facet_wrap(Ëœgroup)
g5 <- ggplot(data, aes(x=Volume))
g5 <- g5 + geom_density()
g5 <- g5 + facet_wrap(~group)
g5
perDay <- data %>% filter(Shower<51)
View(perDay)
perDay <- data %>% filter(Shower<51) %>% group_by(Shower)
View(perDay)
perDay <- data %>% filter(Shower<51) %>% group_by(Shower) %>%
summarise(meanVol = mean(Volume))
View(perDay)
View(perDay)
perDay <- data %>% filter(Shower<51) %>% group_by(Shower)
View(perDay)
perDay <- data %>% filter(Shower<51) %>% group_by(Shower) %>%
summarise(meanVol = mean(Volume))
View(perDay)
View(survey)
View(perDay)
g6 <- ggplot(perDay, aes(x=Shower, y = meanVol))
g6 <- g6 + geom_line()
g6
perDayAndGroup <- data %>% filter(Shower<51) %>% group_by(Shower, group)
View(perDayAndGroup)
View(survey)
perDay <- data %>% filter(Shower<51) %>% group_by(Shower)
View(perDay)
perDay <- data %>% filter(Shower<51) %>% group_by(Shower) %%
summarise(meanVol = mean(Volume))
perDay <- data %>% filter(Shower<51) %>% group_by(Shower) %%
summarise(meanVol = mean(Volume))
perDay <- data %>% filter(Shower<51) %>% group_by(Shower) %>%
summarise(meanVol = mean(Volume))
perDayAndGroup <- data %>% filter(Shower<51) %>% group_by(Shower, group) %>%
summarise(meanVol= mean(Volume))
View(perDayAndGroup)
g7 <- ggplot(perDayAndGroup, aes(x=Shower, y = meanVol,
color = factor(group)))
g7 <- g7 + geom_vline(xintercept = 10, color = "black") +
geom_line() + facet_wrap(~group)
g7
data$ExperimentalGroup <- ""
for (i in 1:nrow(data)){
if (data$group[i] == "First group" | data$group[i] == "Second group"){
data$ExperimentalGroup[i] <- "Control"
} else {
data$ExperimentalGroup[i] <- "Intervention"
}
}
View(data)
decideGroup <- function(value) {
if(value == "First group" | value == "Second group"){
return("Control")
} else {
return("Intervention")
}
}
data$ExperimentalGroup2 <- sapply(data$group, decideGroup)
View(data)
data$ExperimentalGroup3 <- ifelse(data$group == "First group" || data$group == "Second group"
,"Control", "Intervention")
data$ExperimentalGroup3 <- ifelse(data$group == "First group" || data$group == "Second group"
,"Control", "Intervention")
data$ExperimentalGroup3 <- ifelse(data$group == "First group" || data$group == "Second group"
,"Control", "Intervention")
data$group <- as.factor(data$group)
data$ExperimentalGroup3 <- ifelse(data$group == "First group" || data$group == "Second group"
,"Control", "Intervention")
data$ExperimentalGroup3 <- ifelse(data$group %in% c("First group","Second group")
,"Control", "Intervention")
View(data)
