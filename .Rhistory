#Read the data
1 + 1
#Read the data
1 == 1
#Read the data
T & F
#Read the data
log(30)
2 + 3 * 52
8 ^5
(2 ^ 3) ^5
1.4E-2
1.4E^-2
s_vector <- c(3,7,11,15)
print(s_vector)
c(3,7,11,15)
1:10
sample(1:99, 10)
sample(1:100, 10)
x <- c(1,2,3,4,5,6,7)
print(x[1:3])
print(order(x))
order(x)
# Print the indices
print(order_indices)
x <- c(5, 2, 8, 1, 7)
# Use the order() function
order_indices <- order(x)
# Print the indices
print(order(x))
# Print the sorted vector
print(sorted_x)
x <- c(5, 2, 8, 1, 7)
# Use the order() function to get indices
order_indices <- order(x)
print(order_indices)
# Use the order() function to get indices
order_indices <- order(x)
print(sorted_x)
print(sorted_x)
debugSource("~/Downloads/dummy.R")
print(sorted_x)
print(sorted_x)
print(sorted_x)
print(sorted_x)
print(sorted_x)
order_indices <- order(x)
print(sorted_x)
# Print the sorted vector
print(sorted_x)
debugSource("~/Downloads/dummy.R")
# Create a vector
x <- c(5, 2, 8, 1, 7)
debugSource("~/Downloads/dummy.R")
print(squared_nums)
debugSource("~/Downloads/dummy.R")
print(squared_nums)
print(y)
print(y)
debugSource("~/Downloads/dummy.R")
y <- x + 1
print(y)
debugSource("~/Downloads/dummy.R")
print(x+y)
print(x+y)
print(x/y)
debugSource("~/Downloads/dummy.R")
source("~/Downloads/dummy.R")
debugSource("~/Downloads/dummy.R")
# Perform element-wise addition
print(x + 0:1)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
x <- c(3, 6, 9)
debugSource("~/Downloads/dummy.R")
# Perform element-wise addition
y <- x + 0:2
debugSource("~/Downloads/dummy.R")
print(y)
# Perform element-wise addition
y <- x + 0:11
debugSource("~/Downloads/dummy.R")
# View the structure of the data
str(data)
# View the structure of the data
print(str(data))
# Get the column names of the dataframe
names(data)
# Loading the shower data
data <- read.csv("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv")
print(data)
# Get the class of the object
data <- read.csv(data)
# Loading the shower data
data <- read.csv("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv")
# Loading the shower data
data <- read.csv("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv", header=TRUE, stringsAsFactors=FALSE)
# Loading the shower data
data <- read.csv("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv", header=TRUE, stringsAsFactors=FALSE)
# Get the class of the object
data <- read.csv(data)
# Loading the shower data
data <- read.csv("Shower_data.csv", header=TRUE, stringsAsFactors=FALSE)
# Loading the shower data
data <- read.csv("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv", header=TRUE, stringsAsFactors=FALSE)
# Loading the shower data
file.exists("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv")
# Loading the shower data
data <- read.csv("/Users/pritommazumder/Downloads/Lecture Notes/ADAML/Shower_data.csv", header=TRUE, stringsAsFactors=FALSE)
# Get the column names of the dataframe
print(names(data))
Get the class of the object
# Get the class of the object
print(class(data))
# Loading the shower data
data <- read.csv(file_path, header=TRUE, stringsAsFactors=FALSE)
# Check if the file exists
if (!file.exists(file_path)) {
stop("File not found:", file_path)
}
# Loading the shower data
data <- read.csv(file_path, header=TRUE, stringsAsFactors=FALSE)
setwd("/Users/pritommazumder/Downloads/Lecture Notes/ADAML")
# Loading the shower data
data <- read.csv(file_path, header=TRUE, sep = ",")
Loading the shower data
# Loading the shower data
# data <- read.csv(file_path, header=TRUE, sep = ",")
getwd()
# Loading the shower data
data <- read.csv("Shower_data.csv", header=TRUE, sep = ",")
# Loading the shower data
data <- read.csv("Shower_data.csv", header=TRUE, sep = "\t")
# Loading the shower data
data <- read.csv("Shower_data.csv", header=TRUE, sep = ";")
print(class(data))
print(dim(data))
# Get the class of the object
print(class(data))
# View the first few rows of the dataframe
print(head(data))
# Get summary statistics for each column
print(summary(data))
# Get the column names of the dataframe
print(names(data))
# Get the column names of the dataframe
names(data)
# Assuming data is your data frame
# Convert columns to appropriate data types
data$NumericColumn <- as.numeric(data$NumericColumn)
data$FactorColumn <- as.factor(data$FactorColumn)
View(data)
# Loading the shower data
data <- read.csv("Shower_data.csv", header=TRUE, sep = ";")
View(data)
View(data)
data$x1 <- as.factor(data$x1)
data$x1 <- as.factor(data$x1)
data$group <- as.factor(data$group)
data$Totalshowers <- as.character(data$Totalshowers)
data$Shower <- as.integer(data$Shower)
summary(data)
frame(data)
frame(data)
summary(data)
setwd("/Users/pritommazumder/Downloads/Lecture Notes/ADAML-UniBam")
shower_data <- load("Shower_data.csv")
shower_data <- read.csv("Shower_data.csv", header = TRUE, ";")
shower_survey <- read.csv("Shower_survey_data", header = TRUE, ";")
shower_data <- read.csv("Shower_data.csv", header = TRUE, sep = ";")
shower_survey <- read.csv("Shower_survey_data", header = TRUE, sep = ";")
shower_survey <- read.csv("Shower_survey_data.csv", header = TRUE, sep = ";")
View(shower_data)
# 1.Compute the average Showertime using mean().
average_showertime <- mean(shower_data$Showertime)
# 2. Compute the Showertime variance with var().
variance_showertime <- var(shower_data$Showertime)
# 3. Compare the mean showertime with median.
median_showertime <- median(data$Showertime)
cat("Average Showertime:", average_showertime, "\n")
cat("Median Showertime:", median_showertime, "\n")
# 4. Compute the standard deviation of Volume with sd()
standard_deviation <- sd(shower_data$Volume)
# 5. Apply quantile() to ShowerTime. How can you access the individual values of the output?
quantile_data <- quantile(data$Showertime)
cat(quantile_data)
cat(quantile_data[1])
range <- function(vector){
return (max(vector) - min(vector))
}
# 7. Apply your function to the Volume of showers.
range(shower_data$Volume)
View(shower_data)
a <- filter(shower_data, Hh_ID == 6395)
#### dplyr
library(dplyr)
install.packages("tidyverse")
install.packages("dplyr")
#### dplyr
library(dplyr)
# 8. Select all the showers from Hoursehold "6395" and assign these to varaible "a".
a <- filter(shower_data, Hh_ID == 6395)
View(a)
# 9. Order the showers of household "6395" by the recorded Volume and assign these
# these to variable "b".
b <- arrange(a, Volume)
View(b)
# 10. Select all the showers with the exception of Household "6395" and "5307" and
# assign them to "c".
c <- filter(shower_data, Hh_Id %in% c(6395, 5307))
# 10. Select all the showers with the exception of Household "6395" and "5307" and
# assign them to "c".
c <- filter(shower_data, HD_Id %in% c(6395, 5307))
# 10. Select all the showers with the exception of Household "6395" and "5307" and
# assign them to "c".
c <- filter(shower_data, HD_ID %in% c(6395, 5307))
# 10. Select all the showers with the exception of Household "6395" and "5307" and
# assign them to "c".
c <- filter(shower_data, Hh_ID %in% c(6395, 5307))
View(c)
# 10. Select all the showers with the exception of Household "6395" and "5307" and
# assign them to "c".
c <- filter(shower_data, !Hh_ID %in% c(6395, 5307))
View(c)
d <- summarise(shower_data, minShowerDuration = min(Showertime),
maxShowerDuration = max(Showertime))
View(d)
# 12. Introduce a new column "Avgtemperaturefahrenheit" using "mutate". Therefore,
# convert the column "Avgtemperature" to Fahrenheit unit using the package "weathermetrics".
e <- dplyr::mutate(data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
install.packages("weathermetrics")
e <- dplyr::mutate(data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
library(weathermetrics)
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
View(shower_data)
e <- dplyr::mutate(data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
shower_data <- read.csv("Shower_data.csv")
shower_data <- read.csv("Shower_data.csv", header = TRUE, sep = ";")
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
library(weathermetrics)
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
View(shower_data)
View(shower_survey)
View(shower_data)
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit = weathermetrics::celsius.to.fahrenheit(Avgtemperature))
shower_data$Avgtemperature[is.na(shower_data$Avgtemperature)] <- 0
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
str(shower_data$Avgtemperature)
shower_data$Avgtemperature <- as.numeric(shower_data$Avgtemperature)
e <- dplyr::mutate(shower_data, Avgtemperaturefahrenheit =
weathermetrics::celsius.to.fahrenheit(Avgtemperature))
View(e)
View(shower_data)
grouped_showers <- group_by(shower_data, Hh_ID)
View(grouped_showers)
measures <- summarise(grouped_showers, meanDuration = mean(Showertime),
meanTemperature = mean(Avgtemperature),
meanVolume = mean(Volume))
View(measures)
measures <- data %>% group_by(Hh_ID) %>%
summarise(meanDuration = mean(Showertime),
meanTemperature = mean(Avgtemperature),
meanVolume = mean(Volume))
View(measures)
moreThan50 <- shower_data %>% group_by(Hh_ID) %>%
summarise(n = n()) %>% filter(n > 50)
View(moreThan50)
#16. Calculate the average number of recorded showers per group.
avgNumberOfShowers <- data %>% group_by(Hh_ID, group) %>%
summarise(n = n()) %>%
group_by(group) %>%
summarise(grpmean = mean(n))
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group)
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = n())
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = n()) %%
group_by(group)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = n()) %%
group_by(group) %%
summarise(grpmean = mean(n))
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = n()) %%
group_by(group) %%
summarise(grpmean = mean(n))
#16. Calculate the average number of recorded showers per group.
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = dplyr::n()) %%
group_by(group) %%
summarise(grpmean = mean(n))
str(shower_data)
install.packages("dplyr")
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = dplyr::n()) %%
group_by(group) %%
summarise(grpmean = mean(n))
View(avgNumberOfShowers)
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %%
summarise(n = dplyr::n()) %%
group_by(group) %%
summarise(grpmean = mean(n))
avgNumberOfShowers <- shower_data %>% group_by(Hh_ID, group) %>%
summarise(n = dplyr::n()) %>%
group_by(group) %>%
summarise(grpmean = mean(n))
library(dplyr)
View(a)
